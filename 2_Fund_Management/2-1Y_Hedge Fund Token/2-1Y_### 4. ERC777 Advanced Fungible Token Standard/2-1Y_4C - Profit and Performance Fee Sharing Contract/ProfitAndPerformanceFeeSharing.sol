// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC777/ERC777.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract ProfitAndPerformanceFeeSharing is ERC777, Ownable, ReentrancyGuard {
    mapping(address => uint256) public investorBalances; // Track balances of investors
    mapping(address => uint256) public performanceFees; // Track performance fees owed to fund managers
    uint256 public totalProfits; // Total profits generated by the fund
    uint256 public performanceFeePercentage; // Performance fee percentage

    event ProfitsDistributed(uint256 amount);
    event PerformanceFeePaid(address indexed fundManager, uint256 amount);

    constructor(
        string memory name,
        string memory symbol,
        address[] memory defaultOperators,
        uint256 _performanceFeePercentage
    ) ERC777(name, symbol, defaultOperators) {
        performanceFeePercentage = _performanceFeePercentage;
    }

    // Function to allow fund managers to report profits
    function reportProfits(uint256 amount) external onlyOwner {
        totalProfits += amount; // Update total profits
        emit ProfitsDistributed(amount);
    }

    // Function for the owner to set the performance fee percentage
    function setPerformanceFeePercentage(uint256 percentage) external onlyOwner {
        performanceFeePercentage = percentage;
    }

    // Function for investors to contribute and receive tokens
    function contribute(uint256 amount) external nonReentrant {
        require(amount > 0, "Contribution must be greater than 0");

        investorBalances[msg.sender] += amount;
        _mint(msg.sender, amount, "", ""); // Mint new tokens proportional to contribution
    }

    // Function to distribute performance fees to fund managers
    function distributePerformanceFees() external nonReentrant onlyOwner {
        uint256 performanceFee = (totalProfits * performanceFeePercentage) / 100;
        require(performanceFee > 0, "No performance fee to distribute");

        // Transfer performance fee to fund manager
        performanceFees[owner()] += performanceFee;
        emit PerformanceFeePaid(owner(), performanceFee);
        
        // Reset total profits after distribution
        totalProfits = 0;
    }

    // Function for fund managers to withdraw performance fees
    function withdrawPerformanceFee() external nonReentrant {
        uint256 amount = performanceFees[msg.sender];
        require(amount > 0, "No performance fees to withdraw");

        performanceFees[msg.sender] = 0; // Reset performance fee for fund manager
        _transfer(address(this), msg.sender, amount); // Transfer performance fee

        emit PerformanceFeePaid(msg.sender, amount);
    }

    // Function to view total profits
    function getTotalProfits() external view returns (uint256) {
        return totalProfits;
    }
}
